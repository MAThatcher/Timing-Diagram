/*
 * TODO:
 * Order by Priority if two or more
 * arrive at the same time
 *  
 */

import java.util.*;
public class FIFO{
  private Task[] tasks;
  private int time = 0;
  private String[][] output;
  private Queue<Task> order = new LinkedList<Task>();
  private Vector seen;
  
  //our constructor
  public FIFO (Task[] ourProcesses){
    tasks = ourProcesses;

    // How long is our graph going to be
    for (int i = 0; i < tasks.length; i++){
      time += tasks[i].getServiceTime();
    }
    
    // create output with the proper dimentions
    // output[Y][X]
    output = new String[tasks.length][ time +1];
    
    //format our output
    for(int i = 0 ; i < output.length ; i++){
      for (int j = 0 ; j < output[i].length ; j++){
        output[i][j] = " ";
      }
    }
    for(int i = 0 ; i < tasks.length ; i++){
      output[i][0] = tasks[i].getName();
    }
    //output formatting done
    
    
    
    // TODO if two or more tasks arrive at the same time. Order by Priority
    //Set up queue for arrival
    for (int i = 0 ; i < output[0].length ; i++){
      for (int j = 0 ; j < tasks.length ; j++){
        if (tasks[j].getArrival() == i){
          order.add(tasks[j]);
        }
      }
    }
    
    //now to fill out the output
    
    for (int i = 1 ; i < output[0].length ; i++){  
      for (int j = 0 ; j < output.length ; j++){
        if (order.peek().getServiceTimeRemaning() == 0 && order.peek().getName() == output[j][0]){
          output[j][i-1] = String.valueOf(i-1);
          order.remove();
        }
        if (order.peek().getServiceTimeRemaning() != 0 && order.peek().getName() == output[j][0]){
          output[j][i] = "X";
          order.peek().processRan();
        }
      }
      
      //last element
      if (i == output[0].length -1){
        for (int j = 0 ; j < output.length ; j++){
          if (output[j][i] == "X"){
            output[j][i] = String.valueOf(output[0].length -1);
          }
        }
      }        
    }
    
    for (int i = 0 ; i < tasks.length ; i++){
      tasks[i].setServiceTimeRemaning(tasks[i].getServiceTime());
    }
    
    
  }

  public void showOutput()
  {
    System.out.println("FIRST IN FIRST OUT");
    for(int i = output.length -1 ; i >= 0; i--)
    {
      for (int j = 0 ; j < output[i].length ; j++)
      {
        System.out.print(output[i][j] + " ");
      }
      System.out.println("");
    }
  }
  
}